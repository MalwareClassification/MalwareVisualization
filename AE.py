import numpy as np
import os
import tensorflow as tf
import random
from tqdm import tqdm
from tensorflow.keras import layers, Sequential, models
import datetime
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Conv2D, MaxPooling2D, UpSampling2D
from tensorflow.keras.layers import Input
from tensorflow.keras.datasets import mnist

tf.debugging.set_log_device_placement(False)
#loading data
random.seed(2020)
number = 0
data = []
data_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)),'data', '0')
for files in tqdm(os.listdir(data_dir)):
    p = os.path.join(data_dir, files)
    n = np.load(p)
    data.append([n, '0'])
    number+=1
data_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)),'data', '1')
for files in tqdm(os.listdir(data_dir)):
    p = os.path.join(data_dir, files)
    n = np.load(p)
    data.append([n, '1'])
    number+=1
random.shuffle(data)
X_train, y_train, X_test, y_test = [], [], [] ,[]
for i in range(0, int(number*0.8)):
    X_train.append(data[i][0])
    y_train.append(data[i][1])
for i in range(int(number*0.8), number):
    X_test.append(data[i][0])
    y_test.append(data[i][1])
del(data)
X_train = np.array(X_train)
y_train = np.array(y_train)
X_test = np.array(X_test)
y_test = np.array(y_test)
X_train = X_train.astype("float32")
X_test = X_test.astype("float32")
X_train = np.reshape(X_train, (len(X_train), 256, 256, 1))
X_test = np.reshape(X_test, (len(X_test), 256, 256, 1))
print(f"ReShape of X_train-->{X_train.shape}")
print(f"ReShape of X_test-->{X_test.shape}")
print(X_train[0])
input_modeling = Input(shape=(256, 256, 1))

def ConvolutionalAutoencoder():
    encoder = Conv2D(32, kernel_size=(3, 3), strides = 2, activation="relu", padding="same")(input_modeling)
    encoder = MaxPooling2D((2, 2), padding="same")(encoder)
    encoder = Conv2D(16, kernel_size=(3, 3), strides = 2, activation="relu", padding="same")(encoder)
    encoder = MaxPooling2D((2, 2), padding="same")(encoder)
    encoder = Conv2D(16, kernel_size=(3, 3), strides = 2, activation="relu", padding="same")(encoder)
    encoder = MaxPooling2D((2, 2), padding="same")(encoder)

    decoder = Conv2D(16, kernel_size=(3, 3), activation="relu", padding="same")(encoder)
    decoder = UpSampling2D((2, 2))(decoder)
    decoder = Conv2D(16, kernel_size=(3, 3), activation="relu", padding="same")(decoder)
    decoder = UpSampling2D((2, 2))(decoder)
    decoder = Conv2D(32, kernel_size=(3, 3), activation="relu", padding="same")(decoder)
    decoder = UpSampling2D((2, 2))(decoder)
    decoder = Conv2D(1, kernel_size=(3, 3), activation="sigmoid", padding="same")(decoder)

    ca_model = Model(input_modeling, decoder)
    ca_model.summary()
    ca_model.compile(loss="binary_crossentropy", optimizer="adam", metrics=["acc"])
    return ca_model
ConvolutionalAutoencoder()

history = ConvolutionalAutoencoder().fit(X_train, X_train, epochs=5, batch_size=100, validation_data=(X_test, X_test),shuffle=True)

def PlotImage(image):
    plt.imshow(image, cmap="gray")
    plt.axis("off")


def ShowReconstruction(model, n_image=5):
    # total image 5개
    predict = model.predict(X_test[:n_image])
    fig = plt.figure(figsize=(n_image * 1.5, 3))
    for image_index in range(n_image):
        plt.subplot(2, n_image, 1 + image_index)
        PlotImage(X_test[image_index])
        plt.subplot(2, n_image, 1 + n_image + image_index)
        PlotImage(predict[image_index])


ShowReconstruction(model=ConvolutionalAutoencoder())
X_validation_compressed = ConvolutionalAutoencoder().predict(X_test)

n = 10
plt.figure(figsize=(20, 4))
for i in range(n):
    # 원본 출력하기
    ax = plt.subplot(2, n, i + 1)
    plt.imshow(X_test[i].reshape(256, 256, 1))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)

    ax = plt.subplot(2, n, i + n)
    plt.imshow(X_validation_compressed[i].reshape(256, 256, 1))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
plt.show()
