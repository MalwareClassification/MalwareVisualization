import random
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
import os
from tqdm import tqdm
from numpy import argmax
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D
from tensorflow.keras.layers import Dense, Dropout, Flatten
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.layers import LeakyReLU
from tensorflow.keras import initializers
from tensorflow.keras.callbacks import EarlyStopping
tf.random.set_seed(2020)
np.random.seed(2020)
number_classes = 2
# dataset 설정 구간 주석 제거하시고 complie 해주세요
random.seed(2020)
number = 0
data = []
data_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)),'data', '0')
for files in tqdm(os.listdir(data_dir)):
    p = os.path.join(data_dir, files)
    n = np.load(p)
    data.append([n, '0'])
    number+=1
data_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)),'data', '1')
for files in tqdm(os.listdir(data_dir)):
    p = os.path.join(data_dir, files)
    n = np.load(p)
    data.append([n, '1'])
    number+=1
random.shuffle(data)
X_train, y_train, X_test, y_test = [], [], [] ,[]
for i in range(0, int(number*0.8)):
    X_train.append(data[i][0])
    y_train.append(data[i][1])
for i in range(int(number*0.8), number):
    X_test.append(data[i][0])
    y_test.append(data[i][1])
del(data)
X_train = np.array(X_train)
y_train = np.array(y_train)
X_test = np.array(X_test)
y_test = np.array(y_test)

X_train = X_train.astype("float32")
X_test = X_test.astype("float32")
X_train = np.reshape(X_train, (len(X_train), 256, 256, 1))
X_test = np.reshape(X_test, (len(X_test), 256, 256, 1))

y_train = to_categorical(y_train, number_classes)
y_test = to_categorical(y_test, number_classes)


def MalwareModelCnn():
    model = Sequential()
    model.add(Conv2D(64, kernel_size=(3, 3), padding="same", activation='relu'))
    model.add(MaxPooling2D((2, 2), padding="same"))
    model.add(Conv2D(64, kernel_size=(3, 3), padding="same", activation='relu'))
    model.add(MaxPooling2D((2, 2), padding="same"))
    model.add(Conv2D(32, kernel_size=(3, 3), padding="same", activation='relu'))
    model.add(MaxPooling2D((2, 2), padding="same"))
    model.add(Conv2D(16, kernel_size=(3, 3), padding="same", activation='relu'))
    model.add(Flatten())
    model.add(Dense(128, activation="relu"))
    model.add(Dropout(0.3))
    model.add(Dense(32, activation="relu"))
    model.add(Dense(10, activation="relu"))
    model.add(Dense(2, activation="sigmoid"))

    model.compile(optimizer="adam", loss="binary_crossentropy", metrics=["acc"])
    return model


model = MalwareModelCnn()
early_stop = [EarlyStopping(monitor="val_loss", patience=3, restore_best_weights=True)]
history = model.fit(X_train, y_train, epochs=100, validation_data=(X_test, y_test), batch_size=64, callbacks=early_stop)
print(f"Malware of ACC = {model.evaluate(X_test, y_test)}")
acc = history.history["acc"]
loss = history.history["loss"]

val_acc = history.history["val_acc"]
val_loss = history.history["val_loss"]

plt.plot(loss, "*--", label="train_loss")
plt.plot(val_loss, "^--", label="val_loss")
plt.plot(acc, "*--", label="train_acc")
plt.plot(val_acc, "^--", label="val_acc")

plt.legend(loc="best")
plt.show()
x_hat_idx = np.random.choice(X_train.shape[0], 11306)
x_hat = X_train[x_hat_idx]

yhat = model.predict_classes(x_hat)

result = 0
loss = 0
for i in range(11306):
    if str(argmax(y_train[x_hat_idx[i]])) == str(yhat[i]):
        result += 1
    else:
        loss += 1

print("result > {}".format(result))
print("loss > {}".format(loss))

prediction_result = model.predict(X_test)
prediction_labels = np.argmax(prediction_result, axis=-1)
test_label = np.argmax(y_test, axis=-1)

wrong_result = []

for n in range(0, len(test_label)):
    if prediction_labels[n] == test_label[n]:
        wrong_result.append(n)

sample = random.choices(population=wrong_result, k=16)
count = 0
nrows = ncols= 4
plt.figure(figsize=(12, 8))
for n in sample:
    count += 1
    plt.subplot(nrows, ncols, count)
    plt.imshow(X_test[n].reshape(256, 256), cmap="Greys", interpolation="nearest")
    tmp = "Label:" + str(test_label[n]) + ", Prediction:" + str(prediction_labels[n])
    plt.title(tmp)

plt.tight_layout()
plt.show()
